(i) En el protocolo descrito el cliente conoce la llave pública del servidor (K_w+). ¿Cuál es el método
comúnmente usado para obtener estas llaves públicas para comunicarse con servidores web?
El método más común y seguro para establecer comunicación con un servidor implica una serie de pasos cruciales. En primer lugar, se inicia la comunicación con el servidor, el cual proporciona, entre otros datos, su llave pública. Esta llave pública sirve como punto de partida para garantizar la seguridad de la comunicación. Sin embargo, es fundamental autenticar la asociación de esta llave pública con la entidad con la que se pretende establecer la comunicación.
Esta autenticación se lleva a cabo para asegurar que toda la información encriptada con la llave pública solo pueda ser desencriptada por la llave privada correspondiente, que es poseída exclusivamente por la entidad destinataria. Del mismo modo, cualquier información encriptada o firmada con la llave privada de la entidad puede ser verificada mediante su llave pública. Este proceso permite autenticar y verificar la integridad de los mensajes enviados por la entidad.
La autenticación se realiza a través de certificados digitales, que son emitidos y firmados por Autoridades de Certificación (CAs) en las que confiamos. Estos certificados digitales, firmados con la llave privada de la CA, son almacenados en nuestros dispositivos, generalmente en el navegador web, para validar la autenticidad de las conexiones seguras.
"¿Qué son los certificados SSL/TLS y cómo funcionan?" - Sectigo: https://sectigo.com/que-es-ssl-tls-certificados
"Cómo funcionan los certificados SSL/TLS" - GlobalSign: https://www.globalsign.com/es/blog/como-funcionan-certificados-ssl-tls"

(ii) ¿Por qué es necesario cifrar G y P con la llave privada?
En el contexto del protocolo de intercambio de claves de Diffie-Hellman, no es necesario cifrar los parámetros G y P con el propósito de confidencialidad, ya que este protocolo se centra en garantizar la transmisión segura de una clave confidencial a través de un medio inseguro. Sin embargo, el desafío principal surge en la forma de ataques de Hombre en el Medio (MitM), donde un adversario intenta interceptar la comunicación entre dos partes legítimas, haciéndose pasar tanto por el cliente como por el servidor, y creando así dos claves secretas separadas para cada extremo, simulando una comunicación segura.
Para mitigar este riesgo, una vez que se ha autenticado la llave pública como segura, se utiliza para autenticar los mensajes y garantizar la integridad de la comunicación proveniente de la entidad con la que se desea interactuar. Este proceso ayuda a asegurar la identidad del remitente y previene la suplantación de identidad. Funciona porque solo la entidad posee la llave privada correspondiente, y su llave pública permite verificar cualquier mensaje firmado con su llave privada.
En este contexto, aunque los parámetros G y P pueden ser enviados sin cifrar, es necesario que estén firmados digitalmente para garantizar que provienen del servidor legítimo y no han sido alterados en tránsito.
"Diffie-Hellman Key Exchange" - Crypto101: https://crypto101.io/docs/elliptic_curves/
"Man-in-the-Middle Attack" - OWASP: https://owasp.org/www-community/attacks/Man-in-the-middle_attack"

(iii) El protocolo Diffie-Hellman garantiza “Forward Secrecy”, presente un caso en el contexto del sistema Banner de la Universidad donde sería útil tener esta garantía, justifique su respuesta (por qué es útil en ese caso).
El sistema Banner almacena información sensible, incluyendo datos académicos, administrativos, financieros, entre otros, asociados a cada usuario según su rol. Es crucial mantener todos estos datos cifrados durante su tránsito. El protocolo TLS, que utiliza el intercambio de claves de Diffie-Hellman, asegura que cada sesión iniciada por un usuario posea claves de cifrado únicas, las cuales son eliminadas al finalizar la sesión, garantizando que no se vuelvan a utilizar.
Una vez concluida la sesión, cualquier información interceptada permanecerá cifrada indefinidamente, ya que las claves correspondientes han sido eliminadas. Incluso en caso de un ataque que resulte en la filtración de claves privadas de cifrado de sesiones específicas, estas claves no serían válidas para ninguna otra sesión. Este nivel de seguridad se logra en parte gracias a la aleatoriedad de los valores generados en el proceso. Cada valor 'X' generado por cada parte es único y tiene un amplio rango de números, típicamente entre 1 y un número primo 'P' (excluyendo este último), donde 'P' es un número primo de gran magnitud (en nuestro caso de 1024 bits). Además, dado que 'G' es una raíz primitiva, nunca habrá colisiones entre los valores de 'X' generados.
"Forward Secrecy" - Wikipedia: https://en.wikipedia.org/wiki/Forward_secrecy
"Understanding Forward Secrecy" - Cloudflare: https://blog.cloudflare.com/what-is-forward-secrecy/


Otras referencias
https://www.javatpoint.com/socket-programming
https://riptutorial.com/java/example/579/basic-client-and-server-communication-using-a-socket
https://www.javatpoint.com/socket-programming
https://www.baeldung.com/a-guide-to-java-sockets
https://docs.oracle.com/en/java/javase/11/security/sample-code-illustrating-secure-socket-connection-client-and-server.html
